---
- name: Ensure base directories exist
  ansible.builtin.file:
    path: "{{ item.path }}"
    state: directory
    owner: "{{ pbc_scripts_user }}"
    group: "{{ pbc_scripts_user }}"
    mode: "{{ item.mode }}"
  loop:
    - { path: "{{ pbc_scripts_bin_dir }}", mode: "0700" }
    - { path: "{{ pbc_scripts_env_dir }}", mode: "0700" }

# Install proxmox-backup-client
- name: Set proxmox-backup-client version for architecture
  ansible.builtin.set_fact:
    pbc_scripts_client_selected_version: "{{ pbc_scripts_client_version_arm if pbc_scripts_client_is_arm else pbc_scripts_client_version }}"

- name: Set proxmox-backup-client .deb file name and download URL for the selected architecture
  ansible.builtin.set_fact:
    pbc_scripts_client_deb_filename: >-
      {{
        'proxmox-backup-client-static_' ~ pbc_scripts_client_selected_version ~ '_arm64.deb'
          if pbc_scripts_client_is_arm else
        'proxmox-backup-client-static_' ~ pbc_scripts_client_selected_version ~ '_amd64.deb'
      }}
    pbc_scripts_client_deb_url: >-
      {{
        pbc_scripts_client_url_base_arm ~ pbc_scripts_client_selected_version ~ '/proxmox-backup-client-static_' ~
        pbc_scripts_client_selected_version ~ '_arm64.deb'
          if pbc_scripts_client_is_arm else
        pbc_scripts_client_url_base ~ '/' ~ pbc_scripts_client_suite ~ '/main/binary-amd64/proxmox-backup-client-static_' ~
        pbc_scripts_client_selected_version ~ '_amd64.deb'
      }}
    pbc_scripts_cache_dir: "{{ pbc_scripts_home }}/.cache/pbc-scripts"

- name: Set proxmox-backup-client cached paths
  ansible.builtin.set_fact:
    pbc_scripts_deb_path: "{{ pbc_scripts_cache_dir }}/{{ pbc_scripts_client_deb_filename }}"
    pbc_scripts_extract_dir: >-
      {{ pbc_scripts_cache_dir ~ '/extract/' ~ pbc_scripts_client_selected_version ~ '_' ~ ( 'arm64' if pbc_scripts_client_is_arm else 'amd64') }}

- name: Check current proxmox-backup-client version (if installed)
  ansible.builtin.command: "{{ pbc_scripts_bin_dir }}/proxmox-backup-client version"
  register: pbc_scripts_client_version_check
  changed_when: false
  failed_when: false

- name: Parse installed proxmox-backup-client version
  ansible.builtin.set_fact:
    pbc_scripts_existing_version: "{{ (pbc_scripts_client_version_check.stdout | regex_search('([0-9]+[.][0-9]+[.][0-9]+(?:-[0-9]+)?)')) | default('') }}"

- name: Detect installed proxmox-backup-client architecture
  ansible.builtin.command: "file -b {{ pbc_scripts_bin_dir }}/proxmox-backup-client"
  register: pbc_scripts_client_arch_check
  changed_when: false
  failed_when: false

- name: Parse installed proxmox-backup-client architecture
  ansible.builtin.set_fact:
    pbc_scripts_existing_arch: >-
      {{ 'arm64' if (pbc_scripts_client_arch_check.stdout is defined and 'aarch64' in pbc_scripts_client_arch_check.stdout)
         else ('amd64' if (pbc_scripts_client_arch_check.stdout is defined and 'x86-64' in pbc_scripts_client_arch_check.stdout) else '') }}

- name: Set desired proxmox-backup-client architecture
  ansible.builtin.set_fact:
    pbc_scripts_desired_arch: "{{ 'arm64' if pbc_scripts_client_is_arm else 'amd64' }}"

- name: Determine if architecture mismatch requires reinstall
  ansible.builtin.set_fact:
    pbc_scripts_arch_mismatch: "{{ (pbc_scripts_existing_arch | default('')) != '' and (pbc_scripts_existing_arch != pbc_scripts_desired_arch) }}"

- name: Ensure cache directories exist
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    owner: "{{ pbc_scripts_user }}"
    group: "{{ pbc_scripts_user }}"
    mode: "0700"
  loop:
    - "{{ pbc_scripts_cache_dir }}"
    - "{{ pbc_scripts_extract_dir }}"
  when: pbc_scripts_force_install | bool or (pbc_scripts_existing_version | default('')) != pbc_scripts_client_selected_version or (pbc_scripts_arch_mismatch | default(false))

- name: Download proxmox-backup-client .deb
  ansible.builtin.get_url:
    url: "{{ pbc_scripts_client_deb_url }}"
    dest: "{{ pbc_scripts_deb_path }}"
    mode: "0644"
    checksum: "{{ pbc_scripts_client_deb_checksum | default(omit) }}"
  when: pbc_scripts_force_install | bool or (pbc_scripts_existing_version | default('')) != pbc_scripts_client_selected_version or (pbc_scripts_arch_mismatch | default(false))

- name: Extract PBS client .deb to extraction directory
  ansible.builtin.command:
    cmd: "dpkg -x {{ pbc_scripts_deb_path }} {{ pbc_scripts_extract_dir }}"
  args:
    creates: "{{ pbc_scripts_extract_dir }}/usr/bin/proxmox-backup-client"
  when: pbc_scripts_force_install | bool or (pbc_scripts_existing_version | default('')) != pbc_scripts_client_selected_version or (pbc_scripts_arch_mismatch | default(false))

- name: Find extracted PBS client binaries
  ansible.builtin.find:
    paths: "{{ pbc_scripts_extract_dir }}/usr/bin"
    file_type: file
  register: pbc_extracted_binaries
  when: pbc_scripts_force_install | bool or (pbc_scripts_existing_version | default('')) != pbc_scripts_client_selected_version or (pbc_scripts_arch_mismatch | default(false))

- name: Copy extracted PBS client binaries to [{{ pbc_scripts_bin_dir }}]
  ansible.builtin.copy:
    src: "{{ item.path }}"
    dest: "{{ pbc_scripts_bin_dir }}/{{ item.path | basename }}"
    owner: "{{ pbc_scripts_user }}"
    group: "{{ pbc_scripts_group }}"
    mode: "0755"
    remote_src: yes
  loop: "{{ pbc_extracted_binaries.files | default([]) }}"
  when: pbc_scripts_force_install | bool or (pbc_scripts_existing_version | default('')) != pbc_scripts_client_selected_version or (pbc_scripts_arch_mismatch | default(false))

# Install pbc wrapper scripts
- name: Clone pbc-scripts from repo
  ansible.builtin.git:
    repo: "{{ pbc_scripts_repo }}"
    dest: "{{ pbc_scripts_src_dir }}"
    version: "{{ pbc_scripts_version }}"
    update: true
  become: true
  become_user: "{{ pbc_scripts_user }}"

- name: Symlink scripts into {{ pbc_bin_dir }}
  ansible.builtin.file:
    src: "{{ pbc_scripts_src_dir }}/scripts/{{ item }}"
    dest: "{{ pbc_scripts_bin_dir }}/{{ item }}"
    state: link
  loop:
    - "backup-to-pbs.sh"
    - "list-pbs-snapshots.sh"
    - "pbs-environment.sh"
    - "restore-pbs-backup.sh"

- name: Check if Proxmox Backup Client environment file exists
  ansible.builtin.stat:
    path: "{{ pbc_scripts_env_file }}"
  register: pbc_scripts_env_file_stat

- name: Write Proxmox Backup Client environment file
  ansible.builtin.template:
    src: "pbc.env.j2"
    dest: "{{ pbc_scripts_env_file }}"
    owner: "{{ pbc_scripts_user }}"
    group: "{{ pbc_scripts_user }}"
    mode: "0600"
  when: not pbc_scripts_env_file_stat.stat.exists

- name: Ensure zsh extension dir (optional)
  when: pbc_scripts_install_zsh_extension
  ansible.builtin.file:
    path: "{{ pbc_scripts_zsh_ext_dir }}"
    state: directory
    owner: "{{ pbc_scripts_user }}"
    group: "{{ pbc_scripts_user }}"
    mode: "0755"

- name: Write zsh extension to export env (optional)
  when: pbc_scripts_install_zsh_extension
  ansible.builtin.template:
    src: "pbc-env.zsh.j2"
    dest: "{{ pbc_scripts_zsh_ext_file }}"
    owner: "{{ pbc_scripts_user }}"
    group: "{{ pbc_scripts_user }}"
    mode: "0640"

- name: Reminder to edit PBS_PASSWORD in the config file
  ansible.builtin.debug:
    msg: |
      Please edit the PBS_PASSWORD variable in {{ pbc_scripts_env_file }} to set your Proxmox Backup Server password.
